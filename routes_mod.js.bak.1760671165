module.exports = (app, pool) => {
  // Approve a single held comment
  // GET /admin/mod/approve?comment_id=...&token=...
  app.get('/admin/mod/approve', async (req, res) => {
    try {
      const { comment_id, token } = req.query;
      if (!token || token !== process.env.MOD_TOKEN) return res.status(403).send('Forbidden');
      if (!comment_id) return res.status(400).send('Missing comment_id');

      const [result] = await pool.execute(
        "UPDATE Comment SET status='published' WHERE id=? AND status='held'",
        [String(comment_id)]
      );
      res.json({ ok: true, comment_id, changed: result?.affectedRows ?? 0 });
    } catch (e) {
      res.status(500).json({ error: String(e?.message || e) });
    }
  });

  // TEMP: Approve ALL held comments for a testimony
  // GET /admin/mod/approve_all?testimony_id=...&token=...
  app.get('/admin/mod/approve_all', async (req, res) => {
    try {
      const { testimony_id, token } = req.query;
      if (!token || token !== process.env.MOD_TOKEN) return res.status(403).send('Forbidden');
      if (!testimony_id) return res.status(400).send('Missing testimony_id');

      const [result] = await pool.execute(
        "UPDATE Comment SET status='published' WHERE testimony_id=? AND status='held'",
        [String(testimony_id)]
      );
      res.json({ ok: true, testimony_id, changed: result?.affectedRows ?? 0 });
    } catch (e) {
      res.status(500).json({ error: String(e?.message || e) });
    }
  });
};
