require("dotenv").config({ override: true });
const express = require('express')
const helmet = require('helmet')
const compression = require('compression')
const rateLimit = require('express-rate-limit')
const sanitizeHtml = require('sanitize-html')
const slugify = require('slugify')
const mysql = require('mysql2/promise')
const path = require('path')

const app = express()
/* --- Inject default locals for key pages to prevent 500s --- */app.use((req, res, next) => {  const origRender = res.render.bind(res);  res.render = (view, locals = {}) => {    if (view === 'home') {      locals = Object.assign({        heroSlides: [          { kicker:'Build faith', title:'Share Light. Strengthen Faith in Jesus Christ.', body:'A living library of testimonies, images, and scripture reflections—created by believers, for the world.' },          { kicker:'Your voice matters', title:'Testify of Jesus in your own words.', body:'Short, reverent stories that help someone else find Him.' },          { kicker:'Spread hope online', title:'Uplifting media, scripture, and community.', body:'Calm, ad-free, and focused on Christ.' }        ],        scriptureOfDay: { ref:'Philippians 4:13', text:'I can do all things through Christ which strengtheneth me.' },        topMessages: Array.from({length:3}).map((_,i)=>({ title:'Top Testimony '+(i+1), href:'/testimonies', excerpt:'Short excerpt about how Christ helped…' })),        topVideos:   Array.from({length:3}).map((_,i)=>({ title:'Top Video '+(i+1), href:'/videos' })),        topImages:   Array.from({length:8}).map(()=>({ href:'/images' }))      }, locals);    }    if (view === 'images') {      locals = Object.assign({ imageCats: ['nature','worship','service','scripture art','people','church life'] }, locals);    }    if (view === 'stories') {      locals = Object.assign({ storyCats: ['hope','repentance','healing','miracles','conversion','service','overcoming trials'] }, locals);    }    if (view === 'videos') {      locals = Object.assign({ videoCats: ['testimonies','scripture insights','service stories','music','short clips'] }, locals);    }    return origRender(view, locals);  };  next();});
app.set('trust proxy', 1);
app.use((req,res,next)=>{ res.locals.req=req; next(); });
const PORT = process.env.PORT || 3000
const SITE = process.env.NEXT_PUBLIC_SITE_URL || 'http://localhost:3000'
const DATABASE_URL = process.env.DATABASE_URL || ''

let pool
function getPool(){
  if (!DATABASE_URL) throw new Error('DATABASE_URL missing')
  if (!pool) pool = mysql.createPool({ uri: DATABASE_URL, connectionLimit: 10, supportBigNumbers: true, dateStrings: true })
  return pool
}

app.set('view engine', 'ejs')
app.set('views', path.join(__dirname, 'views'))
app.use(express.urlencoded({ extended: true }))
app.use(express.json({ limit: '256kb' }))
app.use(helmet({
  contentSecurityPolicy: {
    useDefaults: true,
    directives: {
      "script-src": ["'self'","'unsafe-inline'"],
      "img-src": ["'self'","data:"],
      "object-src": ["'none'"],
      "base-uri": ["'self'"],
      "frame-ancestors": ["'none'"]
    }
  },
  referrerPolicy: { policy: "strict-origin-when-cross-origin" },
  crossOriginEmbedderPolicy: false
}))
app.use(compression())
app.use(express.static(path.join(__dirname, 'public'), { maxAge: '1d' }))

const limiter = rateLimit({ windowMs: 60_000, max: 60 })
app.use(limiter)

// Home
app.get('/', (req, res) => res.render('home', { SITE }))

// Submit form
app.get('/submit', (req, res) => res.render('submit', { SITE }))

// List testimonies
app.get('/testimonies', async (req, res) => {
  try{
    const [rows] = await getPool().query(
      "SELECT id, slug, title, COALESCE(lead,'') AS lead, createdAt FROM Testimony WHERE status='PUBLISHED' ORDER BY createdAt DESC LIMIT 50"
    )
    res.render('list', { items: rows, SITE })
  } catch {
    res.render('list', { items: [], SITE })
  }
})

// View single
app.get('/t/:slug', async (req, res) => {
  try{
    const [rows] = await getPool().query(
      "SELECT id, title, lead, body, status, updatedAt FROM Testimony WHERE slug=? LIMIT 1",
      [req.params.slug]
    )
    const t = rows[0]
    if (!t || t.status !== 'PUBLISHED') return res.status(404).render('404', { SITE })
    const safe = sanitizeHtml(String(t.body), {
      allowedTags: sanitizeHtml.defaults.allowedTags.concat(['img','h1','h2','h3']),
      allowedSchemes: ['http','https','mailto']
    })
    res.render('detail', { t: { ...t, body: safe }, SITE })
  } catch {
    return res.status(404).render('404', { SITE })
  }
})

// API: submit
app.post('/api/submit', async (req, res) => {
  try {
    const { title, lead = '', body = '', tags = '' } = req.body || {}
    if (!title || !body || String(title).length < 8 || String(body).length < 120) {
      return res.status(400).json({ error: 'Please provide a longer title and body.' })
    }
    const clean = sanitizeHtml(String(body), { allowedTags: sanitizeHtml.defaults.allowedTags.concat(['img','h1','h2','h3']), allowedSchemes: ['http','https','mailto'] })
    const slug = slugify(String(title), { lower: true, strict: true })
    const now = new Date()

    const pool = getPool()

    // upsert "guest" user
    const email = 'guest@example.org'
    const [u] = await pool.query("SELECT id FROM User WHERE email=?", [email])
    let authorId = u?.[0]?.id
    if (!authorId) {
      authorId = cryptoRandomId()
      await pool.query(
        "INSERT INTO User (id,email,displayName,createdAt,updatedAt) VALUES (?,?,?,?,?)",
        [authorId, email, 'Guest', now, now]
      )
    }

    const id = cryptoRandomId()
    const tagArr = Array.isArray(tags) ? tags : String(tags).split(',').map(s => s.trim()).filter(Boolean)

    await pool.query(
      "INSERT INTO Testimony (id, slug, title, lead, body, tags, status, authorId, createdAt, updatedAt) VALUES (?,?,?,?,?,?,?,?,?,?)",
      [id, slug, String(title), lead || null, clean, JSON.stringify(tagArr), 'PUBLISHED', authorId, now, now]
    )
    res.json({ id, slug, status: 'PUBLISHED' })
  } catch (e) {
    console.error(e)
    res.status(500).json({ error: 'Server error' })
  }
})

// Comments (held), Reactions, Flags
const badWords = ['damn','hell']
app.post('/api/comment', async (req,res)=>{
  try {
    const { testimonyId, body } = req.body || {}
    if (!testimonyId || !body || String(body).length < 8) return res.status(400).json({error:'Short comment'})
    if (badWords.some(w=> new RegExp(`\\b${w}\\b`,'i').test(body))) return res.status(400).json({error:'Please keep comments uplifting.'})
    const id = cryptoRandomId()
    const status = 'held'
    const authorId = 'guest'
    await getPool().query(
      "INSERT INTO Comment (id,testimony_id,author_id,body,status) VALUES (?,?,?,?,?)",
      [id, testimonyId, authorId, sanitizeHtml(body), status]
    )
    res.json({ id, status })
  } catch (e) { console.error(e); res.status(500).json({error:'Server error'}) }
})

app.post('/api/react', async (req,res)=>{
  try{
    const { testimonyId, type } = req.body || {}
    if (!['amen','felt_this','beautiful'].includes(type)) return res.status(400).json({error:'Invalid reaction'})
    const userId = 'guest'
    const id = cryptoRandomId()
    await getPool().query(
      "INSERT IGNORE INTO Reaction (id,testimony_id,user_id,type) VALUES (?,?,?,?)",
      [id, testimonyId, userId, type]
    )
    const [rows] = await getPool().query(
      "SELECT type, COUNT(*) c FROM Reaction WHERE testimony_id=? GROUP BY type",[testimonyId]
    )
    res.json({ counts: rows })
  }catch(e){ console.error(e); res.status(500).json({error:'Server error'}) }
})

app.post('/api/flag', async (req,res)=>{
  try{
    const { targetType, targetId, reason } = req.body || {}
    if (!['post','comment'].includes(targetType)) return res.status(400).json({error:'Invalid target'})
    if (!['disrespect','hate','spam','off-topic','other'].includes(reason)) return res.status(400).json({error:'Invalid reason'})
    const reporterId = 'guest'
    const id = cryptoRandomId()
    await getPool().query(
      "INSERT INTO Flag (id,target_type,target_id,reason,reporter_id,weight) VALUES (?,?,?,?,?,?)",
      [id, targetType, targetId, reason, reporterId, 1.0]
    )
    res.json({ ok:true })
  }catch(e){ console.error(e); res.status(500).json({error:'Server error'}) }
})

// robots + sitemap
app.get('/robots.txt', (req,res)=>{
  res.type('text/plain').send(`User-agent: *\nAllow: /\nSitemap: ${SITE}/sitemap.xml\nHost: ${SITE}\n`)
})
app.get('/sitemap.xml', async (req,res)=>{
  try{
    const [rows] = await getPool().query(
      "SELECT slug, updatedAt FROM Testimony WHERE status='PUBLISHED' ORDER BY updatedAt DESC LIMIT 1000"
    )
    const urls = rows.map(r => `<url><loc>${SITE}/t/${r.slug}</loc><lastmod>${new Date(r.updatedAt).toISOString()}</lastmod><changefreq>weekly</changefreq><priority>0.7</priority></url>`).join('')
    res.type('application/xml').send(
`<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
<url><loc>${SITE}</loc><changefreq>weekly</changefreq><priority>1.0</priority></url>
<url><loc>${SITE}/testimonies</loc><changefreq>daily</changefreq><priority>0.8</priority></url>
${urls}
</urlset>`)
  } catch {
    res.type('application/xml').send(
`<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
<url><loc>${SITE}</loc><changefreq>weekly</changefreq><priority>1.0</priority></url>
<url><loc>${SITE}/testimonies</loc><changefreq>daily</changefreq><priority>0.8</priority></url>
</urlset>`)
  }
})

// 404
getPool();
getPool();
getPool();
app.get('/images', (req,res)=> res.render('images', { SITE }));
app.get('/scriptures', (req,res)=> res.render('scriptures', { SITE }));
app.get('/', (req, res) => {  const heroSlides = [    { kicker:'Build faith', title:'Share Light. Strengthen Faith in Jesus Christ.', body:'A living library of testimonies, images, and scripture reflections—created by believers, for the world.' },    { kicker:'Your voice matters', title:'Testify of Jesus in your own words.', body:'Short, reverent stories that help someone else find Him.' },    { kicker:'Spread hope online', title:'Uplifting media, scripture, and community.', body:'Calm, ad-free, and focused on Christ.' }  ];  const scriptureOfDay = {    ref: 'Philippians 4:13',    text: 'I can do all things through Christ which strengtheneth me.'  };  const topMessages = Array.from({length:3}).map((_,i)=>({ title: 'Top Testimony ' + (i+1), href: '/testimonies', excerpt: 'Short excerpt about how Christ helped…' }));  const topVideos   = Array.from({length:3}).map((_,i)=>({ title: 'Top Video ' + (i+1), href: '/videos' }));  const topImages   = Array.from({length:8}).map((_,i)=>({ href: '/images' }));  res.render('home', { SITE, heroSlides, scriptureOfDay, topMessages, topVideos, topImages, title: 'Share Light — Strengthen Faith in Jesus Christ', canonical: SITE });});
app.get('/images', (req, res) => {  const imageCats = ['nature','worship','service','scripture art','people','church life'];  res.render('images', { SITE, title: 'Image Library — Share Light', canonical: SITE + '/images', imageCats });});
/* --- Final locals normalizer for public pages --- */app.use((req, res, next) => {  const orig = res.render.bind(res);  res.render = (view, locals = {}) => {    const L = { ...locals };    if (view === 'home') {      const slides = Array.isArray(L.heroSlides) ? L.heroSlides : [];      const fallbackSlides = [        { kicker:'Build faith', title:'Share Light. Strengthen Faith in Jesus Christ.', lead:'A living library of testimonies, images, and scripture reflections—created by believers, for the world.', ctas:[{label:'✍️ Share a Testimony', href:'/submit', kind:'brand'},{label:'Browse Stories', href:'/stories'}] },        { kicker:'Your voice matters', title:'Testify of Jesus in your own words.', lead:'Short, reverent stories that help someone else find Him.', ctas:[{label:'Start Writing', href:'/submit', kind:'brand'},{label:'See Examples', href:'/stories'}] },        { kicker:'Spread hope online', title:'Uplifting media, scripture, and community.', lead:'Calm, ad-free, and focused on Christ.', ctas:[{label:'Contribute an Image', href:'/images', kind:'brand'},{label:'Watch Videos', href:'/videos'}] }      ];      L.heroSlides = (slides.length ? slides : fallbackSlides).map(s => ({        kicker: s.kicker || '',        title: s.title || '',        lead:  s.lead  || s.body || '',        ctas:  Array.isArray(s.ctas) ? s.ctas : []      }));        L.heroSlides[0].ctas = [{label:'Share a Testimony', href:'/submit', kind:'brand'},{label:'Browse Stories', href:'/stories'}];      }      L.scriptureOfDay = L.scriptureOfDay || { ref:'Philippians 4:13', text:'I can do all things through Christ which strengtheneth me.' };      L.topMessages = Array.isArray(L.topMessages) && L.topMessages.length ? L.topMessages : Array.from({length:3}).map((_,i)=>({ title:'Top Testimony '+(i+1), href:'/testimonies', excerpt:'Short excerpt about how Christ helped…' }));      L.topVideos   = Array.isArray(L.topVideos) && L.topVideos.length ? L.topVideos   : Array.from({length:3}).map((_,i)=>({ title:'Top Video '+(i+1), href:'/videos' }));      L.topImages   = Array.isArray(L.topImages) && L.topImages.length ? L.topImages   : Array.from({length:8}).map(()=>({ href:'/images' }));    }    if (view === 'images') {      L.imageCats = Array.isArray(L.imageCats) && L.imageCats.length ? L.imageCats : ['nature','worship','service','scripture art','people','church life'];      L.items = Array.isArray(L.items) && L.items.length ? L.items : Array.from({length:12}).map((_,i)=>({ title:'Image '+(i+1), href:'/images' }));    }    if (view === 'stories') {      L.storyCats = Array.isArray(L.storyCats) && L.storyCats.length ? L.storyCats : ['hope','repentance','healing','miracles','conversion','service','overcoming trials'];    }    if (view === 'videos') {      L.videoCats = Array.isArray(L.videoCats) && L.videoCats.length ? L.videoCats : ['testimonies','scripture insights','service stories','music','short clips'];    }    return orig(view, L);  };  next();});
/* --- Final locals normalizer for public pages --- */app.use((req, res, next) => {  const orig = res.render.bind(res);  res.render = (view, locals = {}) => {    const L = { ...locals };    if (view === 'home') {      const slides = Array.isArray(L.heroSlides) ? L.heroSlides : [];      const fallbackSlides = [        { kicker:'Build faith', title:'Share Light. Strengthen Faith in Jesus Christ.', lead:'A living library of testimonies, images, and scripture reflections—created by believers, for the world.', ctas:[{label:'✍️ Share a Testimony', href:'/submit', kind:'brand'},{label:'Browse Stories', href:'/stories'}] },        { kicker:'Your voice matters', title:'Testify of Jesus in your own words.', lead:'Short, reverent stories that help someone else find Him.', ctas:[{label:'Start Writing', href:'/submit', kind:'brand'},{label:'See Examples', href:'/stories'}] },        { kicker:'Spread hope online', title:'Uplifting media, scripture, and community.', lead:'Calm, ad-free, and focused on Christ.', ctas:[{label:'Contribute an Image', href:'/images', kind:'brand'},{label:'Watch Videos', href:'/videos'}] }      ];      L.heroSlides = (slides.length ? slides : fallbackSlides).map(s => ({        kicker: s.kicker || '',        title: s.title || '',        lead:  s.lead  || s.body || '',        ctas:  Array.isArray(s.ctas) ? s.ctas : []      }));        L.heroSlides[0].ctas = [{label:'Share a Testimony', href:'/submit', kind:'brand'},{label:'Browse Stories', href:'/stories'}];      }      L.scriptureOfDay = L.scriptureOfDay || { ref:'Philippians 4:13', text:'I can do all things through Christ which strengtheneth me.' };      L.topMessages = Array.isArray(L.topMessages) && L.topMessages.length ? L.topMessages : Array.from({length:3}).map((_,i)=>({ title:'Top Testimony '+(i+1), href:'/testimonies', excerpt:'Short excerpt about how Christ helped…' }));      L.topVideos   = Array.isArray(L.topVideos) && L.topVideos.length ? L.topVideos   : Array.from({length:3}).map((_,i)=>({ title:'Top Video '+(i+1), href:'/videos' }));      L.topImages   = Array.isArray(L.topImages) && L.topImages.length ? L.topImages   : Array.from({length:8}).map(()=>({ href:'/images' }));    }    if (view === 'images') {      L.imageCats = Array.isArray(L.imageCats) && L.imageCats.length ? L.imageCats : ['nature','worship','service','scripture art','people','church life'];      L.items = Array.isArray(L.items) && L.items.length ? L.items : Array.from({length:12}).map((_,i)=>({ title:'Image '+(i+1), href:'/images' }));    }    if (view === 'stories') {      L.storyCats = Array.isArray(L.storyCats) && L.storyCats.length ? L.storyCats : ['hope','repentance','healing','miracles','conversion','service','overcoming trials'];    }    if (view === 'videos') {      L.videoCats = Array.isArray(L.videoCats) && L.videoCats.length ? L.videoCats : ['testimonies','scripture insights','service stories','music','short clips'];    }    return orig(view, L);  };  next();});
require('./routes_mod')(app, getPool());
app.listen(PORT, ()=> console.log("Server listening on " + PORT));


function cryptoRandomId(){
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c=>{
    const r = Math.random()*16|0, v = c === 'x' ? r : (r&0x3|0x8)
    return v.toString(16)
  })
}

// --- TEMP: approve held comments with a token ---
// GET /admin/mod/approve?comment_id=...&token=...
app.get('/admin/mod/approve', async (req,res) => {
  try {
    const { comment_id, token } = req.query
    if (!token || token !== process.env.MOD_TOKEN) return res.status(403).send('Forbidden')
    if (!comment_id) return res.status(400).send('Missing comment_id')

    const [result] = await pool.execute(
      "UPDATE Comment SET status='published' WHERE id=? AND status='held'",
      [String(comment_id)]
    )
    res.json({ ok: true, comment_id, changed: result?.affectedRows ?? 0 })
  } catch (e) {
    res.status(500).json({ error: String(e?.message || e) })
  }
})

// --- TEMP: approve held comments with a token ---
// GET /admin/mod/approve?comment_id=...&token=...
app.get('/admin/mod/approve', async (req,res) => {
  try {
    const { comment_id, token } = req.query
    if (!token || token !== process.env.MOD_TOKEN) return res.status(403).send('Forbidden')
    if (!comment_id) return res.status(400).send('Missing comment_id')

    const [result] = await pool.execute(
      "UPDATE Comment SET status='published' WHERE id=? AND status='held'",
      [String(comment_id)]
    )
    res.json({ ok: true, comment_id, changed: result?.affectedRows ?? 0 })
  } catch (e) {
    res.status(500).json({ error: String(e?.message || e) })
  }
})

// ===== Shared page data =====
const HERO_SLIDES = [
  {
    kicker: "Build faith in Christ",
    title: "Share Light. Strengthen Faith in Jesus Christ.",
    lead: "Your testimony matters. Add your story, image, or video to lift others.",
    ctas: [{label:"Share a Testimony", href:"/submit", kind:"brand"}, {label:"Browse Stories", href:"/stories"}]
  },
  {
    kicker: "A living library",
    title: "Images and videos that point to Jesus.",
    lead: "Contribute reverent media the whole community can reuse (CC BY-NC-SA).",
    ctas: [{label:"Browse Images", href:"/images", kind:"brand"}, {label:"See Videos", href:"/videos"}]
  },
  {
    kicker: "Community-driven",
    title: "Created by believers, for the world.",
    lead: "Flag, uplift, and curate together. Let the internet be filled with light.",
    ctas: [{label:"Join & Share", href:"/submit", kind:"brand"}, {label:"Guidelines", href:"/about"}]
  }
];

const VERSES = [
  { text: "I can do all things through Christ which strengtheneth me.", ref: "Philippians 4:13" },
  { text: "Come unto me, all ye that labour and are heavy laden, and I will give you rest.", ref: "Matthew 11:28" },
  { text: "The Lord is my shepherd; I shall not want.", ref: "Psalm 23:1" },
  { text: "Trust in the Lord with all thine heart; and lean not unto thine own understanding.", ref: "Proverbs 3:5" },
  { text: "I am the light of the world.", ref: "John 8:12" },
  { text: "Be of good cheer; I have overcome the world.", ref: "John 16:33" },
  { text: "Draw near to God, and he will draw near to you.", ref: "James 4:8" }
];

function verseOfDay(){
  const start = new Date(Date.UTC(new Date().getUTCFullYear(),0,0));
  const now   = new Date();
  const diff  = Math.floor((now - start)/86400000);
  return VERSES[diff % VERSES.length];
}

const storyCats = [
  {slug:'hope',label:'Hope'}, {slug:'healing',label:'Healing'},
  {slug:'miracles',label:'Miracles'}, {slug:'conversion',label:'Conversion'},
  {slug:'prayer',label:'Prayer'}, {slug:'service',label:'Service'}
];
const imageCats = [
  {slug:'nature',label:'Nature'}, {slug:'worship',label:'Worship'},
  {slug:'scripture',label:'Scripture'}, {slug:'family',label:'Family'}
];
const videoCats = [
  {slug:'testimonies',label:'Testimonies'}, {slug:'music',label:'Music'},
  {slug:'messages',label:'Messages'}, {slug:'youth',label:'Youth'}
];

// TODO: replace these with real DB queries
function getTopStories(){ return [
  {slug:'faith-through-trial', title:'Faith Through Trial'},
  {slug:'healed-by-him',      title:'Healed by Him'},
  {slug:'found-peace',        title:'Found Peace in Christ'}
];}
function getTopVideos(){ return [
  {href:'#', title:'Christ Helped Me — 90s'},
  {href:'#', title:'Service Changed My Heart'},
  {href:'#', title:'Why I Chose Jesus'}
];}
function getTopImages(){ return [
  {href:'#', title:'Morning Light over Hills'},
  {href:'#', title:'Open Scriptures'},
  {href:'#', title:'Hands in Prayer'}
];}

// ===== Pages =====

// Home
app.get('/', (req,res)=>{
  res.render('home', {
    SITE,
    heroSlides: HERO_SLIDES,
    verse: verseOfDay(),
    topStories: getTopStories(),
    topVideos: getTopVideos(),
    topImages: getTopImages()
  });
});

// Stories (filter-ready via ?cat=)
app.get('/stories', async (req,res)=>{
  const active = (req.query.cat || '').toLowerCase();
  // TODO: real DB filter by category
  const items = getTopStories(); // placeholder list
  res.render('stories', { SITE, storyCats, items, req });
});

// Images
app.get('/images', async (req,res)=>{
  const active = (req.query.cat || '').toLowerCase();
  // TODO: real DB filter by category
  const items = getTopImages();
  res.render('images', { SITE, imageCats, items, req });
});

// Videos
app.get('/videos', async (req,res)=>{
  const active = (req.query.cat || '').toLowerCase();
  // TODO: real DB filter by category
  const items = getTopVideos();
  res.render('videos', { SITE, videoCats, items, req });
});
